using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;

namespace SynNotSoSalty
{
    public class Program
    {
        private static Lazy<Settings> _Settings = null!;
        public static Settings Settings => _Settings.Value;

        public static FormKey SaltPile;
        public static FormKey VoidSalt;
        public static FormKey FrostSalt;
        public static FormKey FireSalt;
        public static ConditionFloat SaltCondition = new();
        public static ConditionFloat VoidSaltCondition = new();
        public static ConditionFloat FrostSaltCondition = new();
        public static ConditionFloat FireSaltCondition = new();


        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynNotSoSalty.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            SaltPile = FormKey.Factory("034CDF:Skyrim.esm");

            if (Settings.EnableMagicSalt)
            {
                VoidSalt  = FormKey.Factory("03AD60:Skyrim.esm");
                FrostSalt = FormKey.Factory("03AD5F:Skyrim.esm");
                FireSalt  = FormKey.Factory("03AD5E:Skyrim.esm");
            }

            //var constructibleObjects = state.LoadOrder.PriorityOrder.ConstructibleObject().WinningOverrides();

            BuildSaltCondition();
            if (Settings.EnableMagicSalt) BuildMagicSaltConditions();

            foreach (var constructibleObject in state.LoadOrder.PriorityOrder.ConstructibleObject().WinningOverrides())
            {
                if (constructibleObject.Items == null) continue;
                var newConObj = constructibleObject.DeepCopy();
                if (newConObj.Items == null) continue;
                bool changed = false;
                bool saltCon = false;

                bool isMagicSalt = false;
                bool voidCon = false;
                bool frostCon = false;
                bool fireCon = false;

                int saltCount = 0;

                foreach (var item in constructibleObject.Items.ToArray())
                {
                    if (Settings.EnableMagicSalt)
                    {
                        if (item.Item.Item.FormKey.Equals(VoidSalt))
                        {
                            isMagicSalt = true;
                            voidCon = true;
                            saltCount += item.Item.Count;
                            newConObj.Items.Remove(item.DeepCopy());
                        }
                        else if (item.Item.Item.FormKey.Equals(FrostSalt))
                        {
                            isMagicSalt = true;
                            frostCon = true;
                            saltCount += item.Item.Count;
                            newConObj.Items.Remove(item.DeepCopy());
                        }
                        else if (item.Item.Item.FormKey.Equals(FireSalt))
                        {
                            isMagicSalt = true;
                            fireCon = true;
                            saltCount += item.Item.Count;
                            newConObj.Items.Remove(item.DeepCopy());
                        }
                    }

                    if (item.Item.Item.FormKey.Equals(SaltPile))
                    {
                        saltCon = true;
                        newConObj.Items.Remove(item.DeepCopy());
                        Console.WriteLine(constructibleObject.FormKey.ToString());
                    }
                }

                if (isMagicSalt)
                {
                    if (voidCon)
                    {
                        newConObj.Conditions.Insert(0, VoidSaltCondition);
                        changed = true;
                    }
                    if (frostCon)
                    {
                        newConObj.Conditions.Insert(0, FrostSaltCondition);
                        changed = true;
                    }
                    if (fireCon)
                    {
                        newConObj.Conditions.Insert(0, FireSaltCondition);
                        changed = true;
                    }
                    if (changed)
                    {
                        if (Settings.MagicSaltRequiresRegularSalt)
                        {
                            var conEnt = new Mutagen.Bethesda.Skyrim.ContainerEntry();
                            conEnt.Item.Item.FormKey = SaltPile;
                            conEnt.Item.Count = saltCount;

                            newConObj.Items.Insert(0, conEnt);
                        }
                    }
                }
                else
                {
                    if (saltCon)
                    {
                        newConObj.Conditions.Insert(0, SaltCondition);
                        changed = true;
                    }
                }

                if(changed) state.PatchMod.ConstructibleObjects.GetOrAddAsOverride(newConObj);
                changed = false;
                saltCon = false;

                isMagicSalt = false;
                voidCon = false;
                frostCon = false;
                fireCon = false;

                saltCount = 0;
            }
            

            
        }

        public static void BuildSaltCondition()
        {
            SaltCondition.CompareOperator = CompareOperator.GreaterThan;
            SaltCondition.ComparisonValue = 0;

            var data = new GetItemCountConditionData();
            data.RunOnType = Condition.RunOnType.Subject;
            data.ItemOrList.Link.FormKey = SaltPile;

            SaltCondition.Data = data;
        }

        public static void BuildMagicSaltConditions()
        {

            //Void
            VoidSaltCondition.CompareOperator = CompareOperator.GreaterThan;
            VoidSaltCondition.ComparisonValue = 0; 
            GetItemCountConditionData vdata = new GetItemCountConditionData();
            vdata.RunOnType = Condition.RunOnType.Subject;
            vdata.ItemOrList.Link.FormKey = VoidSalt;
            VoidSaltCondition.Data = vdata;

            //Frost
            FrostSaltCondition.CompareOperator = CompareOperator.GreaterThan;
            FrostSaltCondition.ComparisonValue = 0;
            GetItemCountConditionData frostdata = new GetItemCountConditionData();
            frostdata.RunOnType = Condition.RunOnType.Subject;
            frostdata.ItemOrList.Link.FormKey = FrostSalt;
            FrostSaltCondition.Data = frostdata;

            //Fire
            FireSaltCondition.CompareOperator = CompareOperator.GreaterThan;
            FireSaltCondition.ComparisonValue = 0;
            GetItemCountConditionData firedata = new GetItemCountConditionData();
            firedata.RunOnType = Condition.RunOnType.Subject;
            firedata.ItemOrList.Link.FormKey = FireSalt;
            FireSaltCondition.Data = firedata;

        }
    }
}
