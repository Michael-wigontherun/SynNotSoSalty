using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using System;
using System.Collections.Generic;
using System.Linq;


namespace SynNotSoSalty
{
    public class Program
    {
        private static Lazy<Settings> _Settings = null!;
        public static Settings Settings => _Settings.Value;

        public static FormKey SaltPile;
        public static FormKey VoidSalt;
        public static FormKey FrostSalt;
        public static FormKey FireSalt;
        public static ConditionGlobal SaltCondition = new ConditionGlobal();
        public static ConditionGlobal VoidSaltCondition = new ConditionGlobal();
        public static ConditionGlobal FrostSaltCondition = new ConditionGlobal();
        public static ConditionGlobal FireSaltCondition = new ConditionGlobal();


        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynNotSoSalty.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            FormKey.TryFactory("034CDF:Skyrim.esm", out SaltPile);

            if (Settings.EnableMagicSalt)
            {
                FormKey.TryFactory("03AD60:Skyrim.esm", out VoidSalt);
                FormKey.TryFactory("03AD5F:Skyrim.esm", out FrostSalt);
                FormKey.TryFactory("03AD5E:Skyrim.esm", out FireSalt);
            }

            //IEnumerable<IConstructibleObjectGetter> constructibleObjects = state.LoadOrder.PriorityOrder.ConstructibleObject().WinningOverrides();

            BuildSaltCondition();
            if (Settings.EnableMagicSalt) BuildMagicSaltConditions();

            foreach (IConstructibleObjectGetter constructibleObject in state.LoadOrder.PriorityOrder.ConstructibleObject().WinningOverrides())
            {
                if(constructibleObject.Items != null)
                {
                    ConstructibleObject newConstructibleObjectOverride = constructibleObject.DeepCopy();
                    bool magicSalts = false;
                    int magicSaltsCount = 0;
                    bool foundSaltPile = false;
                    bool changed = false;
                    foreach (IContainerEntryGetter containerEntryGetter in constructibleObject.Items.ToArray())
                    {
                        if (Settings.EnableMagicSalt)
                        {
                            if (containerEntryGetter.Item.Item.FormKey.Equals(VoidSalt))
                            {
                                magicSalts = true;
                                changed = true;
                                magicSaltsCount += containerEntryGetter.Item.Count;
                                newConstructibleObjectOverride.Items!.Remove(containerEntryGetter.DeepCopy());
                                newConstructibleObjectOverride.Conditions.Insert(0, VoidSaltCondition);
                            }

                            if (containerEntryGetter.Item.Item.FormKey.Equals(FrostSalt))
                            {
                                magicSalts = true;
                                changed = true;
                                magicSaltsCount += containerEntryGetter.Item.Count;
                                newConstructibleObjectOverride.Items!.Remove(containerEntryGetter.DeepCopy());
                                newConstructibleObjectOverride.Conditions.Insert(0, FrostSaltCondition);
                            }

                            if (containerEntryGetter.Item.Item.FormKey.Equals(FireSalt))
                            {
                                magicSalts = true;
                                changed = true;
                                magicSaltsCount += containerEntryGetter.Item.Count;
                                newConstructibleObjectOverride.Items!.Remove(containerEntryGetter.DeepCopy());
                                newConstructibleObjectOverride.Conditions.Insert(0, FireSaltCondition);
                            }
                        }

                        if (containerEntryGetter.Item.Item.FormKey.Equals(SaltPile))
                        {
                            foundSaltPile = true;
                            changed = true;
                            if (!magicSalts) newConstructibleObjectOverride.Items!.Remove(containerEntryGetter.DeepCopy());
                        }
                    }

                    if (magicSalts)
                    {
                        ContainerEntry saltContainerEntry = new ContainerEntry();
                        saltContainerEntry.Item.Item.FormKey = SaltPile;
                        saltContainerEntry.Item.Count = magicSaltsCount;
                        newConstructibleObjectOverride.Items!.Add(saltContainerEntry);
                    }
                    else if (foundSaltPile)
                    {
                        newConstructibleObjectOverride.Conditions.Insert(0, SaltCondition);
                    }
                    
                    if (changed)
                    {
                        state.PatchMod.ConstructibleObjects.GetOrAddAsOverride(newConstructibleObjectOverride);
                    }
                }
                
            }
        }

        public static void BuildSaltCondition()
        {
            FunctionConditionData functionConditionData = new FunctionConditionData();
            functionConditionData.Function = Condition.Function.GetItemCount;
            functionConditionData.ParameterOneRecord.FormKey = SaltPile;
            //functionConditionData.ParameterTwoRecord.FormKey = SaltPile;
            functionConditionData.RunOnType = Condition.RunOnType.Subject;
            functionConditionData.Unknown3 = -1;
            
            SaltCondition.Data = functionConditionData;
            SaltCondition.CompareOperator = CompareOperator.GreaterThan;
        }

        public static void BuildMagicSaltConditions()
        {
            FunctionConditionData functionConditionDataVoid = new FunctionConditionData();
            functionConditionDataVoid.Function = Condition.Function.GetItemCount;
            functionConditionDataVoid.ParameterOneRecord.FormKey = VoidSalt;
            //functionConditionData.ParameterTwoRecord.FormKey = SaltPile;
            functionConditionDataVoid.RunOnType = Condition.RunOnType.Subject;
            functionConditionDataVoid.Unknown3 = -1;

            VoidSaltCondition.Data = functionConditionDataVoid;
            VoidSaltCondition.CompareOperator = CompareOperator.GreaterThan;

            FunctionConditionData functionConditionDataFrost = new FunctionConditionData();
            functionConditionDataFrost.Function = Condition.Function.GetItemCount;
            functionConditionDataFrost.ParameterOneRecord.FormKey = FrostSalt;
            //functionConditionData.ParameterTwoRecord.FormKey = SaltPile;
            functionConditionDataFrost.RunOnType = Condition.RunOnType.Subject;
            functionConditionDataFrost.Unknown3 = -1;

            FrostSaltCondition.Data = functionConditionDataFrost;
            FrostSaltCondition.CompareOperator = CompareOperator.GreaterThan;

            FunctionConditionData functionConditionDataFire = new FunctionConditionData();
            functionConditionDataFire.Function = Condition.Function.GetItemCount;
            functionConditionDataFire.ParameterOneRecord.FormKey = FireSalt;
            //functionConditionData.ParameterTwoRecord.FormKey = SaltPile;
            functionConditionDataFire.RunOnType = Condition.RunOnType.Subject;
            functionConditionDataFire.Unknown3 = -1;

            FireSaltCondition.Data = functionConditionDataFire;
            FireSaltCondition.CompareOperator = CompareOperator.GreaterThan;

        }
    }
}
